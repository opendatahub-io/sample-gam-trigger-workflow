name: Trigger GAM with GH CLI

on:
  workflow_dispatch: {}

env:
  COMPONENT: "Dashboard"

jobs:
  trigger-gam:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/create-github-app-token@v1
      id: app-token
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.PRIVATE_KEY }}
        owner: red-hat-data-services
        repositories: gam-poc

    - name: Get GitHub App User ID
      id: get-user-id
      run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}

    - name: configure git committer string
      run: |
        git config --global user.name '${{ env.COMPONENT }}'


    - name: Trigger GAM
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
      run: |
        gh workflow run test.yaml --repo red-hat-data-services/gam-poc \
                  --ref main \
                  --field component=${{ env.COMPONENT }} \
                  --field workflow_run_id=$GITHUB_RUN_ID

    - name: Fetch GAM Trigger Workflow details
      id: fetch-workflow-details
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
      run: |
        sleep 5  # Wait for 5 seconds
        
        # Fetch the triggered workflow details
        workflow_details=$(gh run list --repo red-hat-data-services/gam-poc \
                             --workflow 127286462 \
                             --json name,databaseId,url,workflowDatabaseId,workflowName,conclusion,createdAt,displayTitle,status \
                             --jq 'map(select(.name | contains("Dashboard-12582005482")))')
    
        # Print the output to the screen
        echo "Workflow details: $workflow_details"
    
        # Exit if more than one workflow detail exists
        if [ $(echo "$workflow_details" | jq 'length') -gt 1 ]; then
          echo "Error: More than one workflow detail found." && exit 1
        fi
    
        # Save the output as GitHub Actions output (string format)
        echo "workflow_details=$workflow_details" >> $GITHUB_ENV  # Use GITHUB_ENV to pass to next steps
    
    - name: Watch Workflow
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
      run: |
        # Access the workflow details from the environment
        workflow_details="${{ env.workflow_details }}"
    
    # Ensure the workflow details are properly quoted and accessible
    echo "Workflow details: $workflow_details"
    
    # Extract the first object from the JSON array and get the databaseId
    database_id=$(echo "$workflow_details" | jq '.[0].databaseId')
    
    # Check if we got a valid databaseId
    if [ -z "$database_id" ]; then
      echo "Error: databaseId not found in workflow details."
      exit 1
    fi
    
    # Log the workflow databaseId and initiate watching
    echo "Watching workflow with ID: $database_id"
    gh run watch --repo red-hat-data-services/gam-poc "$database_id"

        
    
